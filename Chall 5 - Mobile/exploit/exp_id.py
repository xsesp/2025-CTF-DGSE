import sys
import base64
import hashlib
import json
import logging
import requests
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad


if len(sys.argv) != 2:
    print("python exp2.py <id>")
    sys.exit(1)

message_id = sys.argv[1]
STATIC_IV = base64.b64decode("LJo+0sanl6E3cvCHCRwyIg==")
STATIC_SALT = "s3cr3t_s@lt"
BRAND = "Google"
MODELS_FILE = "google_models.txt"
URL = f"http://163.172.67.201:8000/messages?id={message_id}"

def load_models(path: str):
    with open(path, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

def hash_device_id(model: str, brand: str) -> str:
    raw = f"{model}:{brand}"
    sha = hashlib.sha256(raw.encode("utf-8")).digest()
    return base64.b64encode(sha).decode("utf-8")

def derive_key(device_id_hash: str, salt: str) -> bytes:
    raw = f"{device_id_hash}:{salt}"
    return hashlib.sha256(raw.encode("utf-8")).digest()

def decrypt_message(encrypted_b64: str, model: str, brand: str) -> str:
    try:
        device_id_hash = hash_device_id(model, brand)
        key = derive_key(device_id_hash, STATIC_SALT)
        cipher = AES.new(key, AES.MODE_CBC, STATIC_IV)
        decrypted_data = cipher.decrypt(base64.b64decode(encrypted_b64))
        return unpad(decrypted_data, AES.block_size).decode("utf-8")
    except Exception:
        return None

def fetch_messages(url: str):
    response = requests.get(url)
    response.raise_for_status()
    return response.json()["messages"]

def main():
    models = load_models(MODELS_FILE)
    messages = fetch_messages(URL)

    for msg in messages:
        encrypted = msg["content"]
        sender = msg["sender"]
        timestamp = msg["timestamp"]
        decrypted = None

        for model in models:
            decrypted = decrypt_message(encrypted, model, BRAND)
            if decrypted:
                print(f"[{timestamp}] {sender} => {decrypted} (model: {model})")
                break

        if not decrypted:
            print(f"[{timestamp}] {sender} => [Non déchiffré]")

if __name__ == "__main__":
    main()

