import base64
import json
import logging
from pathlib import Path
from typing import List
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import hashlib

STATIC_IV = base64.b64decode("LJo+0sanl6E3cvCHCRwyIg==")
STATIC_SALT = "s3cr3t_s@lt"
BRAND = "Google"
MODELS_FILE = "google_models.txt"

def load_models(path: str) -> List[str]:
    with open(path, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

def hash_device_id(model: str, brand: str) -> str:
    raw = f"{model}:{brand}"
    sha = hashlib.sha256(raw.encode("utf-8")).digest()
    return base64.b64encode(sha).decode("utf-8")

def derive_key(device_id_hash: str, salt: str) -> bytes:
    raw = f"{device_id_hash}:{salt}"
    return hashlib.sha256(raw.encode("utf-8")).digest()

def decrypt_message(encrypted_b64: str, model: str, brand: str) -> str:
    try:
        device_id_hash = hash_device_id(model, brand)
        key = derive_key(device_id_hash, STATIC_SALT)
        cipher = AES.new(key, AES.MODE_CBC, STATIC_IV)
        decrypted_data = cipher.decrypt(base64.b64decode(encrypted_b64))
        return unpad(decrypted_data, AES.block_size).decode("utf-8")
    except Exception as e:
        logging.debug(f"Échec déchiffrement avec model={model} : {e}")
        return None

# Messages chiffrés à tester
messages_json = """{"messages":[
{"content":"M2geCVKOzPlyug9p9DvthxPip0oe9BPiT2sDfFhWy7iC3+JQI4SfO7+SLAlFSUmu8LoGj1hrUWil/uNXvc+5mKBMrRNFQT8ijBK14P0Z8qA=","isEncrypted":true,"sender":"Agent-02","timestamp":"2025-04-01 08:00:00"},
{"content":"//5PBsYWhHlgqhVgG1omUyevzmlErLZVsTCLO78Rbb9qBMPnsKCS5/RZ4GEdWRBPiZ4BtO5h7j2PuIutfqf7ag==","isEncrypted":true,"sender":"Agent-1337","timestamp":"2025-04-01 10:00:00"},
{"content":"2uNMSnJZa5JExhYgNA+V3RAiafhuLkj8Jnr4U+lSZOrrpMWjyA13w0Do3IIPcVBgK070rmweRKX/GkCAxat4i3JfWk1UvWNSmEZbHQlFznR7VFW6FKK84iJKhiDOp8Tk","isEncrypted":true,"sender":"Agent-01","timestamp":"2025-04-02 15:30:00"},
{"content":"Swz/ycaTlv3JM9iKJHaY+f1SRyKvfQ5miG6I0/tUb8bvbOO+wyU5hi+bGsmcJD3141FrmrDcBQhtWpYimospymABi3bzvPPi01rPI8pNBq8=","isEncrypted":true,"sender":"Agent-02","timestamp":"2025-04-03 13:20:00"},
{"content":"NAe44oieygG7xzLQT3j0vN+0NoPNUu0TAaid9Az3IlpcKwR0lSKaPT8F4y1zpbArWFIGpgzsPZtPAwL50qocTRMG/g5u+/wcc1nxmhBjCbg=","isEncrypted":true,"sender":"Agent-04","timestamp":"2025-04-04 08:30:00"},
{"content":"dfeKlZP/gIntHySBYine2YUlNiX3LjlMOLu7y9tgprFyJIIcQpfghlQXut6cJUG2wtzGBVQUm7ITdpLNeVaZjamQHhPWEtNIJE/xtFg66Klui1qCKYKSrmZ4wm1CG/ZPy4csqbM28Ur8dts7XoV5FA==","isEncrypted":true,"sender":"Agent-04","timestamp":"2025-04-05 16:45:00"},
{"content":"HgVONjPe9UpULkg8e9Ps5++m3t4r6RK0pPfMUQJK/Ok5NinC3UJqkltlEukrvehfyas/uOQygGwMFYdRWT6m4gQBq/TdHf9Xpf4kLJl+o9l2shuwBGFpayRLMkRZ0yX1","isEncrypted":true,"sender":"Agent-03","timestamp":"2025-04-06 11:15:00"},
{"content":"M+bWr4Az5IbaOw4oGRKZ0pWrGjK7hhLeXVpOiaOAFw91v8KGwhl5b6bXoEl3qqz5APuiy9gLQp7x7GGDod4mLOBWRby48g2RjABqGa6mg3g=","isEncrypted":true,"sender":"Agent-01","timestamp":"2025-04-06 14:20:00"},
{"content":"Z56plvPjUwczUuTZajCJNqvxB0ArZ9vk38PJnGHSlayR6xe9la8wB4sMOdChcOozbXsjwMRY78wuogxsY57R3iiKe1O3nDpwt3y85BXl9sLEF15wZ8wxc5IfpjVUnRJT","isEncrypted":true,"sender":"Agent-00","timestamp":"2025-04-07 09:00:00"}
]}"""

# JSON
messages = json.loads(messages_json)["messages"]
models = load_models(MODELS_FILE)

for msg in messages:
    encrypted = msg["content"]
    success = False
    for model in models:
        decrypted = decrypt_message(encrypted, model, BRAND)
        if decrypted:
            print(f"[{msg['timestamp']}] {msg['sender']} => {decrypted}  (model: {model})")
            success = True
            break
    if not success:
        print(f"[{msg['timestamp']}] {msg['sender']} => [Non déchiffré]")

